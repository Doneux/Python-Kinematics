psuedocode file, do not run.

Primary kinematic equations we will work with:
x represents position
displacement d represents xi - xf (initial - final)
t represents time
v = d/t #velocity
a = v/t #acceleration
instantenous acceleration and velocity will be handled later
let r represent a radius about which two dimensonal motion occurs, then:
ac = v^2/r #centripetal acceleration

let m represent the mass of an object in a free-body diagram, and let f represent the summation of force vectors acting upon that object (Fnet), then:
f = ma #force
let g represent earth's gravitational acceleration constant, 9.8m/s^2, then
n = mg #normal force
let o represent some angle upon which an object rests, then
n = mg*cos(o) #normal force again
let k represent a spring constant, and in this case, x represent the displacement of the spring from it's position at rest, then
f = -kx # spring force

-----------------------------------------------------------------------------------------

UI solver system notes/scratch sheet:

-- variables to input:
-displacement:
  Initial displacement: Xi
  Final displacement: Xf
  Change in Displacement: dX = Xf - Xi
-time:
  Initial time: Ti
  Final time: Tf
  Change in time: dT = Tf - Ti
-Velocity:
  Initial Velocity: Vi
  Final Velocity: Vf
  Change in velocity: dV = Vi - Vf
  Constant Velocity: V = dX/dT
-Acceleration:
  Initial Acceleration: Ai
  Final Acceleration: Af
  Change in acceleration: dA = Af - Ai
  Constant Acceleration: A = dV/dT
-Mass
  Mass of object: M
-Force:
  Force: F = M * A

--Possible ways to solve for each:
-solve_acceleration:
  A = dV/dT
  A = F/M
-solve_mass:
  M = F / A
-solve_velocity:
  dV = A * dT
  Vf = dV + Vi
  Vi = dV - Vf
-solve_force:
  F = MA
-solve_displacement:
  dX = V * dT
  Xf = dX + Xi
  Xi = dX - Xf
-solve_time:
  dT = dX / V
  Tf = dT + Ti
  Ti = dT - Tf
--continuously run solution functions until no variables have changed
